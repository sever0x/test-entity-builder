package io.github.sever0x.testentitybuilder.core.builder;

import io.github.sever0x.testentitybuilder.core.EntityBuilder;

/**
 * Abstract base class for generated entity builders.
 * Provides common functionality and type-safety for concrete builder implementations.
 *
 * <p>This class serves as the foundation for builders generated by the {@code @GenerateBuilder}
 * annotation processor. It handles the delegation of building operations to the {@link EntityBuilder}
 * while providing a type-safe interface for concrete implementations.
 *
 * <p>Example of a concrete implementation:
 * <pre>
 * {@code
 * public class PersonBuilder extends AbstractEntityBuilder<Person, PersonBuilder> {
 *     public PersonBuilder() {
 *         super(Person.class);
 *     }
 *
 *     public PersonBuilder withName(String name) {
 *         delegate.with("name", name);
 *         return self();
 *     }
 * }
 * }
 * </pre>
 *
 * @param <T> The type of entity being built
 * @param <B> The concrete builder type (for method chaining)
 *
 * @see io.github.sever0x.testentitybuilder.annotation.GenerateBuilder
 * @see io.github.sever0x.testentitybuilder.core.EntityBuilder
 */
public abstract class AbstractEntityBuilder<T, B extends AbstractEntityBuilder<T, B>> {
    protected final EntityBuilder<T> delegate;
    protected final Class<T> targetClass;

    /**
     * Creates a new builder instance for the specified entity type.
     *
     * @param targetClass The class of the entity to build
     * @throws IllegalArgumentException if targetClass is null
     */
    public AbstractEntityBuilder(Class<T> targetClass) {
        this.targetClass = targetClass;
        this.delegate = EntityBuilder.of(targetClass);
    }

    /**
     * Builds and returns an instance of the entity.
     *
     * @return A new instance of the entity with all configured values
     * @throws ObjectCreationException if the entity cannot be instantiated
     * @throws FieldAccessException if there are problems setting field values
     */
    public T build() {
        return delegate.build();
    }

    /**
     * Provides a self-reference for method chaining in derived builder classes.
     *
     * @return The current instance of the builder.
     */
    @SuppressWarnings("unchecked")
    protected B self() {
        return (B) this;
    }
}
